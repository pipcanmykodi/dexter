ii = 0
import base64
oOOo = base64 . b64decode
import time , xbmcaddon , os , requests , xbmc , xbmcgui , urllib , urllib2 , re , xbmcplugin , sys
O0 = 'dex'
o0O = 'plugin.video.%s' % ( O0 )
iI11I1II1I1I = xbmcaddon . Addon ( id = o0O )
oooo = iI11I1II1I1I . getSetting ( oOOo ( 'a2FzdXRhamFuaW1p' ) )
iIIii1IIi = iI11I1II1I1I . getSetting ( oOOo ( 'a2FzdXRhamFuaW1p' ) )
o0OO00 = iI11I1II1I1I . getSetting ( oOOo ( 'a2FzdXRhamFuaW1p' ) )
oo = iI11I1II1I1I . getSetting ( oOOo ( 'c2FsYXNvbmE=' ) )
i1iII1IiiIiI1 = iI11I1II1I1I . getSetting ( oOOo ( 'c2FsYXNvbmE=' ) )
iIiiiI1IiI1I1 = iI11I1II1I1I . getSetting ( oOOo ( 'Y2F0cw==' ) )
o0OoOoOO00 = iI11I1II1I1I . getSetting ( 'box' )
I11i = iI11I1II1I1I . getSetting ( 'pvr' )
O0O = iI11I1II1I1I . getSetting ( 'pvr2' )
Oo = xbmcgui . Dialog ( )
ii = 'dexonline.ninja:8000'
I1ii11iIi11i = [ 'IPTV Simple Client' , '[COLOR yellow]New[/COLOR] Dexter TVGuide' , 'I Dont Use A Guide' ]
def I1IiI ( ) :
 if O0O == 'false' :
  Oo . ok ( 'Setup Guide' , 'Please Select What Guide You Wish To Use' )
  o0OOO = Oo . select ( 'Select Your Guide' , I1ii11iIi11i )
  iI11I1II1I1I . setSetting ( 'pvr' , '%s' % o0OOO )
  iI11I1II1I1I . setSetting ( 'pvr2' , 'true' )
  iIiiiI ( )
 else :
  iIiiiI ( )
def Iii1ii1II11i ( ) :
 Oo . ok ( 'Error!!' , 'Seems Your Username And Password Is Wrong' )
def iIiiiI ( ) :
 iI111iI = 'http://%s/panel_api.php?username=%s&password=%s&type=get_live_categories' % ( ii , iIIii1IIi , i1iII1IiiIiI1 )
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( '"auth":(.+?)' ) . findall ( IiII . content )
 for i1i1II in iI1Ii11111iIi :
  if "1" in i1i1II :
   O0oo0OO0 ( )
  else :
   Oo . ok ( 'Error!!' , 'Seems Your Username And Password Is Wrong' )
def I1i1iiI1 ( ) :
 iiIIIII1i1iI = Oo . select ( 'Ok Choose You Player' , I1ii11iIi11i )
 if iiIIIII1i1iI == 0 :
  iptvsimpleclient ( )
 if iiIIIII1i1iI == 1 :
  iIiiiI ( )
 if iiIIIII1i1iI == 2 :
  tvguide ( )
def o0oO0 ( ) :
 iI111iI = 'http://dexonline.ninja:8000/get.php?username=pipcan&password=nosessss&type=m3u_plus&output=hls'
 IiII = requests . get ( iI111iI )
 print '[plugin.video.dex]'
 iI1Ii11111iIi = re . compile ( ',(.+?)\B\n(.+?)\r' ) . findall ( IiII . content )
 for oo00 , iI111iI in iI1Ii11111iIi :
  print oo00 . replace ( '\r' , '' ) + '=' + iI111iI
  if 88 - 88: O0Oo0oO0o . II1iI . i1iIii1Ii1II
def i1I1Iiii1111 ( url ) :
 i11 ( '[B][[/B] NBA [B]][/B] Center Court' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=239' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] NFL [B]][/B] Sunday Ticket' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=31' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] NHL [B]][/B] Center Ice' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=238' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] MLB [B]][/B] Extra Innings' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=385' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] More [B]][/B] Sports' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=338' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 I11 ( '[B][[/B]Sports[B]][/B] Fixtures' , 'hg' , 101 , '' , '' , '' )
 if 98 - 98: I1111 * o0o0Oo0oooo0 / I1I1i1 * oO0 / IIIi1i1I
 if 72 - 72: iii11iiII % i11IiIiiIIIII / IiiIII111ii / iiIIi1IiIi11 . i1Ii
def I111I11 ( pillow , url , fanart ) :
 O0O00Ooo = ''
 OOoooooO = ''
 i1iIIIiI1I = xbmc . Keyboard ( O0O00Ooo , 'Give Your Recording A Name' )
 i1iIIIiI1I . doModal ( )
 if ( i1iIIIiI1I . isConfirmed ( ) == False ) :
  return
 O0O00Ooo = i1iIIIiI1I . getText ( )
 i1iIIIiI1I = xbmc . Keyboard ( OOoooooO , 'How Long Do You Want To Record For' )
 i1iIIIiI1I . doModal ( )
 if ( i1iIIIiI1I . isConfirmed ( ) == False ) :
  return
 OOoooooO = i1iIIIiI1I . getText ( )
 OOoO000O0OO = xbmcgui . DialogProgress ( )
 OOoO000O0OO . create ( 'Record' , 'Recording %s Has Started' % ( O0O00Ooo ) )
 import subprocess
 iiI1IiI = subprocess . Popen ( 'ffmpeg -t 00:00:%s -i %s -strict -2 /home/pipcan/Documents/%s.mp4 -y' % ( OOoooooO , url , O0O00Ooo ) , shell = True , stdout = subprocess . PIPE , stderr = subprocess . STDOUT )
 II = int ( OOoooooO )
 OOoO000O0OO . update ( 100 , 'Timer' , 'Left %s' % ( II ) )
 while True :
  time . sleep ( 1 )
  OOoO000O0OO . update ( II , 'Time Left %s' % ( II ) , 'Time Remaining ss' )
  if II < 0 :
   OOoO000O0OO . close ( )
   Oo . ok ( 'Record' , 'Recording Has Finished' )
   return
  else :
   II -= 1
   if 57 - 57: ooOoo0O
   if 76 - 76: i1II1I11 / i1I / OO0o / ooO0o0Oo % Oo00OOOOO
   if 85 - 85: O0O00o0OOO0 . ooO0o0Oo / II1iI % o0o0Oo0oooo0 * i11IiIiiIIIII
   if 62 - 62: ooO0o0Oo . o0o0Oo0oooo0 / i1I
def O0oo0OO0 ( ) :
 if 35 - 35: I1I1i1 % Oo00OOOOO . i1II1I11 . i1I + i1Ii % i11IiIiiIIIII
 i11 ( '--------------------------------[ [COLOR orange]Dexter Pro[/COLOR] ]----------------------------' , 'http://137.74.94.109:25461/get.php?username=kids&password=kids&type=m3u_plus&output=m3u8' , 35 , '1' , '1' , 'QUICKEPG' )
 i11 ( '[B][[/B] 247 [B]][/B] Shows' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=18' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] PPV [B]][/B] Events' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=115' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] Live [B]][/B] Tv' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_vod_categories' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 24 , '' , '' , '' )
 i11 ( '[B][[/B] Live [B]][/B] Sports' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=31' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 29 , '' , '' , '' )
 i11 ( '[B][[/B] Web [B]][/B] Youtube/Twitch' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_streams&cat_id=382' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 22 , '' , '' , '' )
 i11 ( '[B][[/B] On [B]][/B] Demand' , 'ss' , 55 , '' , '' , '' )
 I11 ( '[COLOR yellow]TV Guide[/COLOR]' , 'QUICKEPG' , 100 , 'QUICKEPG' , 'QUICKEPG' , 'QUICKEPG' )
 if 80 - 80: o0o0Oo0oooo0
 #	for active in match:
 #		if active == 'NO':
 #			continue
 #		else:
 #			r2 = requests.get('http://pastebin.com/raw/dBhn0YLQ')
 #			match2 = re.compile('\'(.+?)\'').findall(r2.content)
 #			for match3 in match2:
 #				grays('[B]Enter Contest[/B] %s'%(match3),'http://%s/enigma2.php?username=%s&password=%s&type=get_vod_categories'%(site,username,password),99,'','','')
def oOOO0o0o ( ) :
 i11 ( '[COLOR brown]** More News Click Here **[/COLOR]' , 'http://pastebin.com/raw/dMcPdkp7' , 85 , 'g' , '' , '' )
 I11 ( '[COLOR yellow]Not Always Live[/COLOR]' , '' , 85 , '' , '' , '' )
 iI111iI = 'http://pastebin.com/raw/WJ0WH27j'
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( '#EXTINF:0 group-title="(.+?)"' ) . findall ( IiII . content )
 for iiI1 in set ( iI1Ii11111iIi ) :
  i11 ( iiI1 , 'http://pastebin.com/raw/dMcPdkp7' , 85 , iiI1 , '' , '' )
def i11Iiii ( iconimage ) :
 if iconimage == 'g' :
  iI111iI = 'http://pastebin.com/raw/dMcPdkp7'
  IiII = requests . get ( iI111iI )
  iI1Ii11111iIi = re . compile ( '#EXTINF:.+?,(.+?)\n(.+?)\r' ) . findall ( IiII . content )
  for oo00 , iI in set ( iI1Ii11111iIi ) :
   I11 ( oo00 , iI , 84 , iI , '' , '' )
  I1i1I1II = re . compile ( '#EXTINF:-1,(.+?)\n(.+?)\n' ) . findall ( IiII . content )
  for i1 , IiIiiI in set ( I1i1I1II ) :
   I11 ( i1 , IiIiiI , 84 , 'http' + IiIiiI , '' , '' )
  xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
  if 31 - 31: i1I . i1I - IiiIII111ii / iii11iiII + O0O00o0OOO0 * oO0
 else :
  iI111iI = 'http://pastebin.com/raw/dMcPdkp7'
  IiII = requests . get ( iI111iI )
  iI1Ii11111iIi = re . compile ( '#EXTINF:0 group-title="(.+?)",(.+?)\n(.+?)\r' ) . findall ( IiII . content )
  for iiI1 , oo00 , iI in set ( iI1Ii11111iIi ) :
   if iiI1 == iconimage :
    I11 ( oo00 , iI , 84 , iI , '' , '' )
  xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
def O0ooOooooO ( ) :
 iI111iI = 'http://%s/enigma2.php?username=%s&password=%s&type=get_live_categories' % ( ii , iIIii1IIi , i1iII1IiiIiI1 )
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( '<title>(.+?)</title>.+?<!\[CDATA\[(.+?)]]>' ) . findall ( IiII . content )
 for oo00 , iI111iI in iI1Ii11111iIi :
  oo00 = oOOo ( oo00 )
  if 'All' in oo00 :
   i11 ( oo00 , iI111iI , 22 , '' , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
  elif 'AS' in oo00 :
   i11 ( oo00 , iI111iI , 22 , '' , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
  elif 'UK' in oo00 :
   i11 ( oo00 + ' Channels' , iI111iI , 22 , '' , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
  elif 'US' in oo00 :
   i11 ( oo00 , iI111iI , 22 , '' , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
 i11 ( 'Radio Stations' , 's' , 8866 , '' , 'http://localhost:52307/getpvrthumb&title=' , '' )
 i11 ( 'Local News' , 'ss' , 54 , '' , '' , '' )
def o00O ( ) :
 i11 ( 'Video On Demand' , 'http://%s/enigma2.php?username=%s&password=%s&type=get_vod_categories' % ( ii , iIIii1IIi , i1iII1IiiIiI1 ) , 23 , '' , '' , '' )
 i11 ( 'Sky Sports News' , 'hg' , 1001 , '' , '' , '' )
 i11 ( 'Sports Catch Up' , 's' , 2320 , '' , '' , '' )
 i11 ( 'UKTVNow' , 'hg' , 1004 , '' , '' , '' )
 i11 ( 'Kids Corner' , 'http://137.74.94.109:25461/get.php?username=kids&password=kids&type=m3u_plus&output=m3u8' , 35 , '1' , '1' , 'QUICKEPG' )
 i11 ( '[COLOR yellow]More Coming Soon[/COLOR]' , 'hg' , 1001 , '' , '' , '' )
 if 69 - 69: i1Ii % Oo00OOOOO - IiiIII111ii + Oo00OOOOO - II1iI % I1111
def Iii111II ( ) :
 iI111iI = 'http://vschedules.uktv.co.uk/mapi/browse/?format=json'
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( 'description": "(.+?)".+?"image": "(.+?)".+?"id": (.+?), "channel": "(.+?)", "name": "(.+?)"' ) . findall ( IiII . content )
 for iiii11I , Ooo0OO0oOO , ii11i1 , IIIii1II1II , oo00 in iI1Ii11111iIi :
  i11 ( oo00 + ' - ' + IIIii1II1II , 'http://vschedules.uktv.co.uk/mapi/branddata/?format=json&brand_id=%s' % ii11i1 , 1003 , Ooo0OO0oOO , Ooo0OO0oOO , iiii11I )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
def i1I1iI ( url ) :
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '{"brightcove_video_id": (.+?), "episode_txt": "(.+?)".+?"episode_img_cached": "(.+?)", "title": "(.+?)"' ) . findall ( IiII . content )
 for oo0OooOOo0 , o0OO00oO , Ooo0OO0oOO , I11i1I1I in iI1Ii11111iIi :
  I11 ( 'Episode %s' % ( o0OO00oO ) , 'http://c.brightcove.com/services/mobile/streaming/index/master.m3u8?videoId=%s' % oo0OooOOo0 , 84 , Ooo0OO0oOO , Ooo0OO0oOO , I11i1I1I )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
def oO0Oo ( url ) :
 url = 'http://dexonline.ninja:8000/player_api.php?username=%s&password=%s&action=get_vod_categories' % ( iIIii1IIi , i1iII1IiiIiI1 )
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '{"category_id":"(.+?)","category_name":"(.+?)","parent_id":0}' ) . findall ( IiII . content )
 for ii11i1 , oo00 in iI1Ii11111iIi :
  i11 ( '%s' % ( oo00 . replace ( oo00 , '[COLOR white]%s[/COLOR]' % oo00 ) ) , ii11i1 , 884 , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
 xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , oOOo ( 'bW92aWVz' ) )
def oOOoo0Oo ( url ) :
 iI = 'http://dexonline.ninja:8000/player_api.php?username=%s&password=%s&action=get_vod_categories' % ( iIIii1IIi , i1iII1IiiIiI1 )
 IiII = requests . get ( iI )
 iI1Ii11111iIi = re . compile ( '{"category_id":"(.+?)","category_name":"(.+?)","parent_id":"(.+?)"}' ) . findall ( IiII . content )
 for ii11i1 , oo00 , o00OO00OoO in iI1Ii11111iIi :
  if o00OO00OoO == url :
   i11 ( oo00 , ii11i1 , 3655 , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' )
def OOOO0OOoO0O0 ( url ) :
 url = 'http://dexonline.ninja:8000/player_api.php?username=%s&password=%s&action=get_vod_streams&category_id=%s' % ( iIIii1IIi , i1iII1IiiIiI1 , url )
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '"name":"(.+?)","stream_type":"movie","stream_id":"(.+?)".+?ategory_id":".+?container_extension":"(.+?)"' ) . findall ( IiII . content )
 for oo00 , O0Oo000ooO00 , oO0Ii1iIiII1ii1 in iI1Ii11111iIi :
  I11 ( oo00 , 'http://dexonline.ninja:8000/movie/%s/%s/%s.%s' % ( iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 , oO0Ii1iIiII1ii1 ) , 84 , 'http://localhost:52307/getpvrthumb&title=%s' % ( oo00 ) , '' , '' )
def ooOooo000oOO ( url ) :
 url = reqests . get ( 'http://dexonline.ninja:8000/player_api.php?username=%s&password=%s&action=get_live_streams&category_id=%s' , '' )
 if 59 - 59: I1I1i1 + I1111 * i11IiIiiIIIII + o0o0Oo0oooo0
def Oo0OoO00oOO0o ( url ) :
 import urlresolver
 OOO00O = xbmc . Player ( )
 url = urlresolver . HostedMediaFile ( url ) . resolve ( )
 OOO00O . play ( url )
def OOoOO0oo0ooO ( url ) :
 if 98 - 98: OO0o * OO0o / OO0o + i1II1I11
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '<title>(.+?)<.+?>(.+?)<.+?<!\[CDATA\[(.+?)\].+?\[CDATA\[(.+?)\]' ) . findall ( IiII . content )
 for oo00 , iiii11I , ii111111I1iII , url in iI1Ii11111iIi :
  oo00 = oOOo ( oo00 )
  ii111111I1iII = ii111111I1iII . replace ( '[' , '\n[' )
  iiii11I = iiii11I . replace ( '<description>' , '' )
  iiii11I = oOOo ( iiii11I )
  if '[' in oo00 :
   i1 = oo00 . split ( '[' )
   O00ooo0O0 = oo00 . split ( 'min' )
   iiii11I = iiii11I . split ( '\n(' )
   i1iIi1iIi1i ( '[COLOR white][B]%s[/B][/COLOR] - [COLOR grey][I]%s[/I][/COLOR]- [COLOR grey][I]%s[/I][/COLOR]' % ( i1 [ 0 ] , iiii11I [ 0 ] , iiii11I [ 1 ] . replace ( '\n' , '' ) . replace ( ')' , '' ) ) , url , 4 , ii111111I1iII , 'http://localhost:52307/getpvrthumb&title=%s&fallback=%s' % ( i1 [ 0 ] , ii111111I1iII ) , ( '[B]%s[/B]\n[COLOR white]Now: [/COLOR][COLOR yellow]%s[/COLOR]\n[COLOR white]Description: [/COLOR][COLOR yellow]%s[/COLOR]\n' % ( i1 [ 0 ] , iiii11I [ 0 ] , iiii11I [ 1 ] . replace ( '[' , '[COLOR white]Next:[/COLOR][' ) ) ) )
  else :
   i1iIi1iIi1i ( '[COLOR white][B]%s[/B][/COLOR]' % ( oo00 ) , url , 4 , ii111111I1iII , 'http://localhost:52307/getpvrthumb&title=%s&fallback=%s' % ( oo00 , ii111111I1iII ) , oo00 )
 xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
 xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
def I1I1iIiII1 ( ) :
 iI111iI = 'http://skysports.com/watch/video'
 IiII = requests . get ( iI111iI . replace ( '/more/2' , '' ) )
 iI1Ii11111iIi = re . compile ( 'class="page-nav__link.+?>(.+?)</a>' ) . findall ( IiII . content )
 for oo00 in iI1Ii11111iIi :
  i11 ( oo00 , 'http://skysports.com/watch/video/sports/%s' % ( oo00 . lower ( ) . replace ( ' ' , '-' ) ) , 1002 , '' , '' , '' )
def i11i1I1 ( url ) :
 IiII = requests . get ( url )
 iI = url
 iI1Ii11111iIi = re . compile ( 'data-src="(.+?)\.jpg\?.+?".+?alt="(.+?)"' , re . DOTALL ) . findall ( IiII . content )
 for ii111111I1iII , oo00 in iI1Ii11111iIi :
  ii1I = ii111111I1iII . split ( '/' )
  I11 ( oo00 , 'http://video.skysports.com/%s/DOcJ-FxaFrRg4gtDEwOmk2OjBrO6qGv_?_=jq5zj61x7lkbts4rysyvi' % ( ii1I [ 6 ] ) , 4 , ii111111I1iII + '.jpg' , ii111111I1iII + '.jpg' , oo00 )
 xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
 Oo0ooOo0o = '%s/more/2' % ( iI )
 i11 ( 'Next Page' , Oo0ooOo0o , 1002 , '' , '' , '' )
def o0OO00 ( ) :
 try :
  Oo = xbmcgui . Dialog ( )
  if Oo . yesno ( 'would you like to enter' , 'would you like to enter' , '' , "" , 'No' , 'Yes' ) :
   iI111iI = 'http://dexonline.ninja/contest/check.php?myusername=%s&mypassword=%s' % ( iIIii1IIi , i1iII1IiiIiI1 )
   IiII = requests . get ( iI111iI )
   iI1Ii11111iIi = re . compile ( 'Entered: Your number is: (\d?\d?\d?\d?)' ) . findall ( IiII . content )
   I1i1I1II = re . compile ( '(.+?)' ) . findall ( IiII . content )
   for Ii1i1 in iI1Ii11111iIi :
    if Ii1i1 :
     Oo . ok ( 'Keep Safe !!!' , 'your number is %s' % Ii1i1 )
   for iiIii in I1i1I1II :
    if iiIii == '"' :
     Oo . ok ( 'Warning' , 'You Have Already Entered' )
     if 79 - 79: I1111 / II1iI
  else :
   Oo . ok ( "You Pressed Close" , " You Pressed Close    " )
 except :
  pass
  if 75 - 75: i11IiIiiIIIII % IiiIII111ii % IiiIII111ii . Oo00OOOOO
def III1iII1I1ii ( ) :
 Oo = xbmcgui . Dialog ( )
 oOOo0 = xbmc . translatePath ( 'special://home/addons' )
 oo00O00oO = os . listdir ( oOOo0 )
 if 'script.mtvguide' in oo00O00oO :
  xbmc . executebuiltin ( "runScript(plugin://script.tvguide.tvguide2/" )
 else :
  Oo . ok ( 'Not Installed' , 'Sorry You Dont Have The Guide Installed Please Go To My Kodi Then Programs And Select Retxed Tv Guide' )
  if 23 - 23: iii11iiII + iii11iiII . ooOoo0O
  if 38 - 38: Oo00OOOOO
  if 7 - 7: II1iI . OO0o % iiIIi1IiIi11 - oO0 - i1iIii1Ii1II
  if 36 - 36: ooO0o0Oo % O0O00o0OOO0 % IIIi1i1I - iiIIi1IiIi11
def Ii1I ( ) :
 Oo = xbmcgui . Dialog ( )
 oOOo0 = xbmc . translatePath ( 'special://home/addons' )
 oo00O00oO = os . listdir ( oOOo0 )
 if 'plugin.program.fixtures' in oo00O00oO :
  xbmc . executebuiltin ( 'RunAddon(plugin.program.fixtures)' )
 else :
  Oo . ok ( 'Not Installed' , 'Sorry You Dont Have The Sports Fixtures Installed Please Go To My Kodi Then Programs And Select Sports Fixtures' )
  if 77 - 77: OO0o % OO0o * i1Ii - O0Oo0oO0o
  if 93 - 93: I1111 / oO0 % O0Oo0oO0o + iiIIi1IiIi11 * iii11iiII
def I1 ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/247.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def iI1iIIiiii ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/PPV.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def i1iI11i1ii11 ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/NFL.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def OOooo0O00o ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/NHL.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def oOOoOooOo ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/NBA.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def O000oo ( pillow , url , iconimage , description ) :
 i11 ( '[ [COLOR green]Kids Corner[/COLOR] ]' , 'http://137.74.94.109:25461/get.php?username=kids&password=kids&type=m3u_plus&output=m3u8' , 35 , '1' , '1' , 'QUICKEPG' )
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( 'group-title="(.+?)"' ) . findall ( IiII . content )
 I1i1I1II = re . compile ( 'group-title="(.+?)",(.+?)\n(.+?)\r' ) . findall ( IiII . content )
 if iconimage == '1' :
  for IIi1I11I1II in set ( iI1Ii11111iIi ) :
   i11 ( IIi1I11I1II . replace ( '.' , ' ' ) . replace ( '_' , ' ' ) , oOOo ( 'aHR0cDovLzEzNy43NC45NC4xMDk6MjU0NjEvZ2V0LnBocD91c2VybmFtZT1raWRzJnBhc3N3b3JkPWtpZHMmdHlwZT1tM3VfcGx1cyZvdXRwdXQ9bTN1OA==' ) , 35 , 'http://localhost:52307/getpvrthumb&title=%s' % IIi1I11I1II , 'http://localhost:52307/getpvrthumb&title=%s' % IIi1I11I1II , IIi1I11I1II )
  xbmcplugin . addSortMethod ( handle = int ( sys . argv [ 1 ] ) , sortMethod = xbmcplugin . SORT_METHOD_TITLE )
  if 63 - 63: I1111 - iii11iiII . I1I1i1 / IiiIII111ii . i11IiIiiIIIII / II1iI
  xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , '555' )
 else :
  I11 ( 'Play All' , 'hh' , 6668 , '' , '' , '' )
  for iiI1 , i1 , iI in I1i1I1II :
   if 84 - 84: ooO0o0Oo
   if iiI1 == description :
    I11 ( i1 . replace ( '.' , ' ' ) . replace ( '720' , '[COLOR gold]720[/COLOR]' ) . replace ( '1080' , '[COLOR gold]1080[/COLOR]' ) . replace ( '_' , ' ' ) . replace ( pillow , '[COLOR white][B]%s[/B][/COLOR] - ' % pillow ) , iI , 84 , i1 , 'http://localhost:52307/getpvrthumb&title=%s' % ( i1 ) , i1 )
    if 86 - 86: i11IiIiiIIIII - i1I - iii11iiII * OO0o
def oooo0O0 ( url , iconimage , fanart ) :
 oo00 = [ ]
 iI11Ii = [ ]
 url = 'http://hostmybuild.com/guide/Kickoff.txt'
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '(.+?)=(.+?)=' ) . findall ( IiII . content )
 for i1 , i1iIIIi1i in iI1Ii11111iIi :
  oo00 . append ( i1 )
  iI11Ii . append ( i1iIIIi1i )
 Oo = xbmcgui . Dialog ( )
 o0OOO = Oo . select ( 'Select A Station' , oo00 )
 if o0OOO > 0 :
  O0Oo000ooO00 = iI11Ii [ o0OOO ]
  O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , O0Oo000ooO00 )
  OOO00O = xbmc . Player ( )
  OOO00O . play ( O0Oo000ooO00 )
 else :
  return
def oOOO ( url , iconimage , fanart ) :
 O0Oo000ooO00 = 'http://%s/live/%s/%s/%s.m3u8' % ( ii , iIIii1IIi , i1iII1IiiIiI1 , url )
 OOO00O = xbmc . Player ( )
 OOO00O . play ( O0Oo000ooO00 )
 if 16 - 16: iii11iiII / iiIIi1IiIi11 + i1I
 if 65 - 65: II1iI
 if 68 - 68: ooOoo0O % Oo00OOOOO
def ooO00OO0 ( ) :
 iI111iI = 'http://fullmatchtv.com'
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( 'class="menu-item menu-item-type-post_type menu-item-object-page menu-item-\d\d\d\d"><a href="(.+?)">(.+?)</a></li>' ) . findall ( IiII . content )
 for iI111iI , oo00 in iI1Ii11111iIi :
  i11 ( oo00 , iI111iI , 88767 , '' , '' , '' )
  if 31 - 31: OO0o % OO0o % i1II1I11
def OOOOoo0Oo ( url ) :
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '"(.+?)" rel="bookmark" title="(.+?)"><img width=".+?" height=".+?" class="entry-thumb" src="(.+?)"' ) . findall ( IiII . content )
 for url , oo00 , Ooo0OO0oOO in iI1Ii11111iIi :
  I11 ( oo00 . replace ( '&#8211;' , '' ) , url , 2002 , Ooo0OO0oOO , Ooo0OO0oOO , '' )
def ii111iI1iIi1 ( url ) :
 url = url . replace ( 'td-module-thumb"><a href="' , '' )
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( 'iframe src="(.+?)" scrolling="no" frameborder="0" width="100%" height="430" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true"></iframe>' ) . findall ( IiII . content )
 for url in iI1Ii11111iIi :
  Oo0OoO00oOO0o ( url )
def OOO ( url ) :
 OOO00O = xbmc . Player ( )
 OOO00O . play ( url )
 if 68 - 68: I1I1i1 + i1II1I11
def I1I1I ( url , iconimage , fanart ) :
 if o0OoOoOO00 == 'false' :
  xbmc . executebuiltin ( 'ActivateWindow(12005)' )
 url = url . replace ( '.ts' , '.m3u8' )
 OOO00O = xbmc . Player ( )
 OOO00O . play ( url )
 if o0OoOoOO00 == 'false' :
  xbmc . executebuiltin ( 'ActivateWindow(12005)' )
  OoOO000 = xbmc . executebuiltin ( 'ShowPicture("%s")' % ( iconimage ) )
  time . sleep ( 4.5 )
  xbmc . executebuiltin ( 'Action(back)' )
  time . sleep ( 1.0 )
def i1Ii11i1i ( ) :
 iI111iI = 'http://streema.com/radios'
 IiII = requests . get ( iI111iI )
 iI1Ii11111iIi = re . compile ( '<a href="/radios/region/(.+?)">' ) . findall ( IiII . content )
 for oo00 in iI1Ii11111iIi :
  i11 ( oo00 , iI111iI + '/region/' + oo00 , 8867 , '' , '' , '' )
def o0oOOoo ( url ) :
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( '<a href="/radios/country/(.+?)">' ) . findall ( IiII . content )
 for oo00 in iI1Ii11111iIi :
  i11 ( oo00 , 'http://streema.com/radios/%s' % ( oo00 ) , 8868 , '' , '' , '' )
def oOo00O0oo00o0 ( url ) :
 IiII = requests . get ( url )
 iI1Ii11111iIi = re . compile ( 'src="https://static-media.streema.com/media/(.+?)".+?alt="(.+?)".+?<span class="now-playing-text"(.+?)/span>' , re . DOTALL ) . findall ( IiII . content )
 for ii111111I1iII , oo00 , iiOOooooO0Oo in iI1Ii11111iIi :
  if iiOOooooO0Oo == '><' :
   ii111111I1iII = 'https://static-media.streema.com/media/%s' % ( ii111111I1iII )
   i11 ( oo00 . replace ( ' Logo' , '' ) , 'http://streema.com/radios/%s' % ( oo00 ) , 8867 , '' , '' , '' )
  else :
   iiOOooooO0Oo = iiOOooooO0Oo . replace ( '<' , '' ) . replace ( '>' , '' )
   i11 ( '%s - [COLOR yellow]%s[/COLOR]' % ( oo00 . replace ( ' Logo' , '' ) , iiOOooooO0Oo ) , 'http://streema.com/radios/%s' % ( oo00 ) , 8867 , '' , '' , '' )
def OO ( ) :
 iIiIIi1 = [ ]
 I1IIII1i = sys . argv [ 2 ]
 if len ( I1IIII1i ) >= 2 :
  I1I11i = sys . argv [ 2 ]
  Ii1I1I1i1Ii = I1I11i . replace ( '?' , '' )
  if ( I1I11i [ len ( I1I11i ) - 1 ] == '/' ) :
   I1I11i = I1I11i [ 0 : len ( I1I11i ) - 2 ]
  i1Oo0oO00o = Ii1I1I1i1Ii . split ( '&' )
  iIiIIi1 = { }
  for i11I1II1I11i in range ( len ( i1Oo0oO00o ) ) :
   OooOoOO0 = { }
   OooOoOO0 = i1Oo0oO00o [ i11I1II1I11i ] . split ( '=' )
   if ( len ( OooOoOO0 ) ) == 2 :
    iIiIIi1 [ OooOoOO0 [ 0 ] ] = OooOoOO0 [ 1 ]
 return iIiIIi1
def I11 ( pillow , url , mode , iconimage , fanart , description ) :
 iI1i11iII111 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&pillow=" + urllib . quote_plus ( pillow ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&description=" + urllib . quote_plus ( description )
 Iii1IIII11I = True
 OOOoo0OO = xbmcgui . ListItem ( pillow , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 OOOoo0OO . setInfo ( type = "Video" , infoLabels = { "Title" : pillow , "Plot" : description } )
 OOOoo0OO . setProperty ( "Fanart_Image" , fanart )
 Iii1IIII11I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = iI1i11iII111 , listitem = OOOoo0OO , isFolder = False )
 return Iii1IIII11I
def i11 ( pillow , url , mode , iconimage , fanart , description ) :
 iI1i11iII111 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&pillow=" + urllib . quote_plus ( pillow ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&description=" + urllib . quote_plus ( description )
 Iii1IIII11I = True
 OOOoo0OO = xbmcgui . ListItem ( pillow , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 OOOoo0OO . setInfo ( type = "Video" , infoLabels = { "Title" : pillow , "Plot" : description } )
 OOOoo0OO . setProperty ( "Fanart_Image" , fanart )
 Iii1IIII11I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = iI1i11iII111 , listitem = OOOoo0OO , isFolder = True )
 return Iii1IIII11I
def i1iIi1iIi1i ( pillow , url , mode , iconimage , fanart , description ) :
 iI1i11iII111 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&pillow=" + urllib . quote_plus ( pillow ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&description=" + urllib . quote_plus ( description )
 oO0o0 = None
 iI1Ii11iIiI1 = None
 OOOoo0OO = xbmcgui . ListItem ( pillow , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 OOOoo0OO . setInfo ( type = "Video" , infoLabels = { "Title" : pillow , "Plot" : description } )
 OOOoo0OO . setProperty ( "Fanart_Image" , fanart )
 OOoOO0oo0ooO = [ ]
 pillow = pillow . replace ( '[COLOR white]' , '' ) . replace ( '[/COLOR]' , '' ) . replace ( '[B]' , '' ) . replace ( '[/B]' , '' ) . replace ( '[COLOR grey]' , '' )
 try :
  oO0o0 = pillow . split ( '-' )
  iI1Ii11iIiI1 = oO0o0 [ 1 ] . replace ( '[' , '' ) . replace ( ']' , '' )
 except :
  pass
 OOoOO0oo0ooO . append ( ( '[COLOR orange]Record [/COLOR]%s' % ( iI1Ii11iIiI1 ) , 'XBMC.Container.Update(%s?mode=846&name=%s&url=%s&fanart=%s)' % ( sys . argv [ 0 ] , pillow , url , '20' ) ) )
 OOOoo0OO . addContextMenuItems ( items = OOoOO0oo0ooO , replaceItems = True )
 Iii1IIII11I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = iI1i11iII111 , listitem = OOOoo0OO , isFolder = False )
 return Iii1IIII11I
 if 86 - 86: i1Ii * IiiIII111ii % o0o0Oo0oooo0 . i1I . O0Oo0oO0o
I1I11i = OO ( )
iI111iI = None
oOOoo00O00o = None
O0O00Oo = None
oooooo0O000o = None
OoO = None
iiii11I = None
try :
 iI111iI = urllib . unquote_plus ( I1I11i [ "url" ] )
except :
 pass
try :
 oOOoo00O00o = urllib . unquote_plus ( I1I11i [ "pillow" ] )
except :
 pass
try :
 oooooo0O000o = urllib . unquote_plus ( I1I11i [ "iconimage" ] )
except :
 pass
try :
 O0O00Oo = int ( I1I11i [ "mode" ] )
except :
 pass
try :
 OoO = urllib . unquote_plus ( I1I11i [ "fanart" ] )
except :
 pass
try :
 iiii11I = urllib . unquote_plus ( I1I11i [ "description" ] )
except :
 pass
if O0O00Oo == None or iI111iI == None or len ( iI111iI ) < 1 :
 I1IiI ( )
 if 51 - 51: I1111 * ooOoo0O
elif O0O00Oo == 3 :
 exec oOOo ( 'aGVsbG8odXJsKQ==' )
elif O0O00Oo == 2 :
 exec oOOo ( 'aGVsbG8odXJsKQ==' )
elif O0O00Oo == 2320 :
 ooO00OO0 ( )
elif O0O00Oo == 4 :
 I1I1I ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 40 :
 I1 ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 42 :
 iI1iIIiiii ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 43 :
 i1iI11i1ii11 ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 44 :
 OOooo0O00o ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 45 :
 oOOoOooOo ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 46 :
 oooo0O0 ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 88 :
 oOOO ( iI111iI , oooooo0O000o , OoO )
elif O0O00Oo == 5 :
 Oo0OoO00oOO0o ( iI111iI )
elif O0O00Oo == 22 :
 OOoOO0oo0ooO ( iI111iI )
elif O0O00Oo == 23 :
 oO0Oo ( iI111iI )
elif O0O00Oo == 24 :
 O0ooOooooO ( )
elif O0O00Oo == 99 :
 o0OO00 ( )
elif O0O00Oo == 29 :
 i1I1Iiii1111 ( iI111iI )
elif O0O00Oo == 100 :
 III1iII1I1ii ( )
elif O0O00Oo == 35 :
 O000oo ( oOOoo00O00o , iI111iI , oooooo0O000o , iiii11I )
elif O0O00Oo == 36 :
 kidsepisodes ( iI111iI )
elif O0O00Oo == 101 :
 Ii1I ( )
elif O0O00Oo == 80 :
 getdep ( )
elif O0O00Oo == 84 :
 OOO ( iI111iI )
elif O0O00Oo == 54 :
 oOOO0o0o ( )
elif O0O00Oo == 55 :
 o00O ( )
elif O0O00Oo == 1001 :
 I1I1iIiII1 ( )
elif O0O00Oo == 1002 :
 i11i1I1 ( iI111iI )
elif O0O00Oo == 85 :
 i11Iiii ( oooooo0O000o )
elif O0O00Oo == 1004 :
 Iii111II ( )
elif O0O00Oo == 1003 :
 i1I1iI ( iI111iI )
elif O0O00Oo == 884 :
 oOOoo0Oo ( iI111iI )
elif O0O00Oo == 883 :
 oO0Oo ( iI111iI )
elif O0O00Oo == 8866 :
 i1Ii11i1i ( )
elif O0O00Oo == 8867 :
 o0oOOoo ( iI111iI )
elif O0O00Oo == 8868 :
 oOo00O0oo00o0 ( iI111iI )
elif O0O00Oo == 88767 :
 OOOOoo0Oo ( iI111iI )
elif O0O00Oo == 2002 :
 ii111iI1iIi1 ( iI111iI )
elif O0O00Oo == 3655 :
 OOOO0OOoO0O0 ( iI111iI )
elif O0O00Oo == 846 :
 I111I11 ( oOOoo00O00o , iI111iI , OoO )
elif O0O00Oo == 6668 :
 playall ( )
exec oOOo ( 'eGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ==' )
if 73 - 73: iiIIi1IiIi11 * O0Oo0oO0o % i1Ii . iiIIi1IiIi11
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3

