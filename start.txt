
import re, sys, os, requests,time,urllib
import xbmcaddon, xbmcgui, xbmcplugin, xbmc
from strings import *
from skins import Skin
Skin.fixSkinIfNeeded()
import gui
pluginname = 'tvguide2'
e= 'script.%s'%(pluginname)
o = xbmcaddon.Addon(id=e)
dexuser = o.getSetting('dexuser')
dexpass = o.getSetting('dexpass')

if not dexuser:
    dialog = xbmcgui.Dialog()
    dialog.ok('You Are Not Logged In','You Must Login To User This Guide Please Go To Settings And End Username And Password')
    sys.exit()
else:

    o.setSetting('m-TVGuide','http://dexonline.ninja:8000/xmltv.php?username=%s&password=%s'%(dexuser,dexpass))
    url = 'http://dexonline.ninja:8000/get.php?username=%s&password=%s&type=m3u&output=hls'%(dexuser,dexpass)
    r = requests.get(url)
    file = open(xbmc.translatePath('special://home/addons/script.tvguide2/resources/addons.ini'),'w')
    file.write('[plugin.video.dex]\n')
    match = re.compile(',(.+?)\B\n(.+?)\r').findall(r.content)
    for name,url in match:
        file.write(name.replace('\r','').replace('[','').replace(']','')+'='+url+'\n')
    file.close()
class Start:
    def __init__(self):
        self.Run()

    def Run(self):
        try:
            Skin.checkForUpdates()
            w = gui.tvguide2()
            w.doModal()
            w.close()
            del w
            del xbmc.Player
            deb('TVGuide successfully closed')
        except Exception, ex:
            deb('addon.py exception: %s' % str(ex))

init = Start()